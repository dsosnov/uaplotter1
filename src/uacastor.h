#ifndef UACASTOR_H
#define UACASTOR_H

#include "uabase.h"

#include "MyCastorRecHit.h"
#include "vector"

namespace castor {
  const unsigned int CSectors = 16;
  const unsigned int CModules = 14;
  const unsigned int CChannels = 224;
};  

class uacastor :  public uabase
{
public:
    uacastor(TChain     * tree, 	 //!<tree of ua format
	    TDirectory * dir,    //!<directory in the output root file
	    const bool cmstotem, //!<true for merged, false for CMS only
	    const bool cmsdigis,
	    const short          int MC,  //!< -1, 0 - data; >0 MC
	    const short unsigned int Ncuts //!< number of cuts
	   );
    ~uacastor();
    void PrintEventInfo(const bool detailed);
    bool FillLastEvent(const short unsigned int cut);
    bool ProceedEvent(const short unsigned int cut, const bool fill, const bool info);
    double GetE(){return total_em_energy;};

private:
  const bool digi;
  std::vector<MyCastorRecHit>*     Castor;

  double total_energy;
  double total_em_energy;

  unsigned int n_ch_fired;
  unsigned int n_towers; // above tower threshold
  unsigned int n_towers_5; // -- " -- for 5 mod
  unsigned int n_towers_em; // -- " -- for em
  double em_energy[castor::CSectors];
  double tower_energy[castor::CSectors];
  double tower_energy5[castor::CSectors];
  bool   channel_above_threshold[castor::CSectors][castor::CModules];
  bool   tower_above_threshold[castor::CSectors];    
  bool   tower_above_threshold_5[castor::CSectors]; 
  unsigned int towers_modules_above_threshold[castor::CSectors]; // only [1,5] 
  bool   tower_above_threshold_em[castor::CSectors];

  // igor's values re-calculated in the constructor
  double channel_threshold[castor::CSectors][castor::CModules];

  void create_histos();  
  TH1F ** castor_etotal_h; //  for different conditions
  TH1F ** castor_emfract_h;
  TH1F ** castor_towers_h;
  TH1F ** castor_towers5_h;
  TH1F ** castor_towersEM_h;
  ClassDef(uacastor,2);
};

namespace castor {
    // my values from thresholds.txt
    const double tower_threshold[CSectors] = {
      1.2, 1.6, 1.4, 1.2, 1.6, 1.2, 1., 1.2, 1.2, 2.2, 2., 1.8, 1.2, 1.2, 1.8, 1.6
    };
    const double tower_threshold_5[CSectors] = {
      1.2, 1., 1.4, 0.8, 0.8, 1., 0.8, 1., 0.8, 1.8, 1.8, 1.6, 1.2, 1.2, 1.6, 1.4
    };
    const double tower_threshold_em[CSectors] = {
      0.8, 0.6, 0.8, 0.4, 0.4, 0.6, 0.4, 0.4, 0.4, 0.8, 1.2, 1., 0.8, 0.6, 1., 0.8
    };

    // later on from Igor
  const double absCasEscaleFactor = 1.49475628341732545e+02/3.38945322418397409e+04 * 7.82961248095532028e+02/1.33096168279108213e+02; 
//calibration in units of GeV

//using for Katerina's value's (some correction values seem too big (for me big is all >3), some are zeros)
  const bool channelQuality[CSectors][CModules] =                                          // sector
    //mod 1   2     3     4     5      6    7     8     9    10     11    12   13    14
    {{true ,true ,true ,false,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 1
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 2
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,true ,true }, // 3 //s3m9 ? 
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,false,true }, // 4
     {true ,false,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 5
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 6 //s6m9 ?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,false,false,false,false,false}, // 7 //s7m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,false,false,false,false}, // 8 //s8m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,true }, // 9 //s9m13?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 10
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 11 //s11m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 12 //s12m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,false,false,false,false,true ,false,true ,false,true }, // 13 //s13m11katerina?(was also there before) //m9s13-SNP//m13s13-SNP
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 14 //s14m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,true ,true ,true ,true }, // 15
     {true ,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true ,true }};// 16 //m8s16-strange-noise-peak(SNP),closer look needed

// Katerina's values using halo muon data (w/o TOTEM), already scaled by s9m4
  const double channelGainQE[CSectors][CModules] =                                                                                // sector
    //mod 1          2          3          4           5          6          7         8          9          10         11          12        13           14
    {{  0.7510,    0.8700,    2.7370,    0.0000,    0.3630,    0.6430,    0.0000,    0.3100,    0.2120,    0.2740,    0.3030,    0.1690,    0.2650,    0.1550}, //1
     {  0.6190,    0.6160,    1.8130,    0.8690,    0.1820,    0.6280,    0.0000,    0.5070,    0.1680,    0.2910,    0.3380,    0.1460,    0.2490,    0.1250}, //2
     {  1.0700,    0.6510,    1.4250,    0.7660,    0.3040,    0.1930,    8.2170,   13.2900,    0.4650,    0.2350,    0.0000,    0.2950,    0.3430,    0.3510}, //3
     {  0.5310,    0.3300,    0.8910,    0.8260,    0.1170,    0.3300,    0.0000,    0.0000,    0.0000,    0.6390,    0.0000,    0.3170,    0.0000,    0.4580}, //4
     {  0.6120,    0.0000,    1.3410,    0.7020,    0.1560,    0.5690,    0.8360,    0.0000,    0.0000,    0.5230,    0.2360,    0.3290,    0.3990,    0.3420}, //5
     {  1.3130,    0.4870,    1.4000,    0.6320,    0.1990,    0.7950,    1.2090,    0.0000,    0.5100,    0.7060,    0.2330,    0.2800,    0.4830,    0.4410}, //6
     {  0.4160,    0.2820,    1.0430,    0.3130,    0.1140,    0.0860,  250.6690,    0.1950,    0.4200,    6.9160,    3.4790,    1.5110,    4.8590,    3.5340}, //7
     {  0.3420,    0.2950,    1.1980,    1.4030,    0.2130,    1.0730,    0.0000,    0.2060,    0.6350,   27.2690,    9.4210,    3.3400,    3.4880,    1.0100}, //8
     {  0.3030,    0.8460,    1.4120,    1.0000,    0.2180,    0.8830,    0.0000,    0.1320,    0.1950,    0.2490,    0.2250,    0.2270,    0.2990,    0.2780}, //9
     {  0.9040,    1.4030,    2.6580,    1.1900,    0.2350,    1.5570,    0.0000,    0.3160,    0.1990,    0.3100,    0.1790,    0.2510,    0.2510,    0.2520}, //10
     {  1.0160,    0.9930,    1.6950,    0.8870,    0.2850,    0.6230,    0.0000,   10.0790,    0.3730,    0.2440,    9.6350,    0.5240,    0.6990,    0.3790}, //11
     {  1.1690,    1.1300,    2.1400,    1.3920,    0.2630,    1.2470,    0.0000,    0.0000,    0.5670,    0.3030,   99.3510,    0.3510,    0.1980,    0.3560}, //12
     {  0.9160,    1.2700,    1.6430,    0.8070,    0.2310,    2.3020,    0.0000,    0.0000,    0.3230,    0.2910,    0.0000,    0.3430,    0.1280,    0.3080}, //13
     {  0.6010,    0.9840,    2.1400,    0.8210,    0.1770,    1.0970,    0.0000,    0.0000,    0.2030,    0.2920,   16.6350,    0.3020,    0.3510,    0.3680}, //14
     {  0.7590,    1.3650,    2.9620,    1.1740,    0.3800,    2.3370,    0.0000,  517.2540,    0.2690,    0.0000,    0.1940,    0.2740,    0.2800,    0.4100}, //15
     {  0.7420,    0.9720,    2.4600,    0.9240,    0.2200,    0.1630,    3.9070,    0.1970,    0.2700,    0.2580,    0.1510,    0.1340,    0.2790,    0.2620}};//16

  // noise :   
  const double noise_towers_gaumean[CSectors] = {
 0.0176063, 
 0.0264634, 
 0.0133731, 
 0.0120672, 
 0.00522064,
 0.020237,  
 0.00936707,
 0.0088537, 
 0.00311906,
 0.0449396, 
 0.0132952, 
 -0.0066457,
 0.0142651, 
 0.0131637, 
 0.00956398,
 0.0137566};

 const double noise_tower_gausigma[CSectors] = {
 0.304648,
 0.258378,
 0.30041, 
 0.18817, 
 0.319546,
 0.22768, 
 0.162632,
 0.28628, 
 0.25235, 
 0.566598,
 0.497529,
 0.507935,
 0.294993,
 0.313872,
 0.478432,
 0.395016};

 const double noise_channel_gaumean[CSectors][CModules] =                                                                                                                                                                                   //sect
//mod         1              2             3              4              5              6              7              8              9              10            11              12             13           14 
{{       1.057329,      0.316340,      0.367072,     -0.000000,      0.378817,     -0.296329,     -0.000000,      0.021354,      0.240231,      0.058508,      0.082109,      0.325008,     -0.168646,     -0.099046 }, //1
 {       0.789905,     -0.581259,      0.083574,     -0.262187,      2.671701,      0.141249,     -0.000000,     -0.011589,     -0.651060,      0.294061,      0.183936,      0.435390,     -0.351155,     -0.269199 }, //2
 {      -0.439896,     -0.047129,     -0.654526,      0.417381,      0.378833,      0.131819,      0.000000,      0.000000,     -0.000000,      0.102923,     -0.000000,     -0.313822,      0.052381,      0.111159 }, //3
 {       0.275055,     -0.560313,      0.274866,      0.154597,      0.069830,      0.377379,     -0.000000,      0.000000,      0.000000,     -0.074363,      0.000000,      0.377776,     -0.000000,      0.335409 }, //4
 {       0.195386,     -0.000000,     -0.085420,     -1.102122,     -0.113556,      0.037380,      0.000000,      0.000000,      0.000000,     -0.016315,     -0.050377,      0.329895,      0.494370,     -0.046417 }, //5
 {      -0.215291,     -0.364024,      0.908222,      1.179714,     -0.390478,      0.259371,      0.000000,      0.000000,     -0.000000,      0.068626,     -0.253656,      0.369664,     -0.055326,      0.083338 }, //6
 {       0.179249,      0.115082,      0.247312,      0.253749,     -0.032341,      0.237865,      0.000000,     -0.012790,      0.183987,      0.000000,     -0.000000,      0.000000,     -0.000000,      0.000000 }, //7
 {       0.657055,      0.654888,      0.342302,     -0.180057,     -0.329831,      0.033688,     -0.000000,     -0.000000,     -0.304289,     -0.000000,     -0.000000,      0.000000,     -0.000000,      0.000000 }, //8
 {       0.007880,     -0.027942,      0.021542,     -0.371148,      0.027267,     -0.341226,     -0.000000,      0.405440,     -0.057773,     -0.049313,      0.080197,     -0.061449,      0.000000,      0.057186 }, //9
 {      -0.387060,     -0.740519,      0.541585,      0.295040,      0.088115,      0.179338,      0.000000,     -0.029567,      0.268063,      0.303624,     -0.041795,     -0.092635,      0.177029,      0.086606 }, //10
 {      -0.734678,     -0.332597,     -0.155089,      0.354001,      0.083489,     -0.548714,      0.000000,      0.000000,     -0.183576,      0.623947,      0.000000,     -0.136371,     -0.629511,      0.166142 }, //11
 {       0.285381,      0.246489,     -0.034035,      0.712890,      0.036468,      0.945726,      0.000000,      0.000000,      0.220453,      0.183891,     -0.000000,     -0.282803,     -0.134572,      0.403624 }, //12
 {      -0.016675,     -0.037670,      0.304193,     -0.140272,     -0.268142,     -0.000000,      0.000000,      0.000000,      0.000000,      0.333918,      0.000000,      0.065121,      0.000000,     -0.012641 }, //13
 {       0.606364,      0.537642,      0.614492,     -0.208519,      0.040301,      0.135330,      0.000000,      0.000000,      0.092821,     -0.753602,     -0.000000,      0.233863,      0.067138,      0.546248 }, //14
 {       0.401042,      0.074889,      0.395312,     -0.213893,      0.366900,     -0.414628,      0.000000,      0.000000,     -0.069910,     -0.000000,      0.272562,     -0.526925,      0.128359,      0.253419 }, //15
 {      -0.307800,      0.153503,     -0.406243,      0.126801,     -0.122867,     -0.000000,      0.000000,      0.000000,      0.102786,     -0.307029,      0.102755,      0.362114,      0.060893,      0.297666 }};//16

const double noise_channel_gausigma[CSectors][CModules] =                                                                                                                                                                                   //sect
{{       7.703349,      7.397740,      3.920427,      0.000000,      3.856097,      4.011218,      0.000000,      3.917727,      3.959038,      3.338606,      3.888338,      3.870030,      3.944036,      3.892034 },
{       7.032504,      6.774386,      4.267844,      3.937607,      3.998656,      3.887573,      0.000000,      9.920964,      4.272433,      3.963520,      3.940410,      3.744598,      4.065837,      3.934811 },
{       6.013120,      6.339195,      4.511158,      9.913983,      4.207110,      3.987416,      0.000000,      0.000000,      0.000000,      3.925468,      0.000000,      3.992926,      3.919310,      3.782493 },
{       5.636619,      4.808359,      5.219331,      6.280026,      4.472861,      3.727050,      0.000000,      0.000000,      0.000000,      3.613167,      0.000000,      3.938490,      0.000000,      3.779500 },
{       5.590963,      0.000000,      4.906203,      4.887220,      4.300980,      3.391052,      0.000000,      0.000000,      0.000000,     16.520192,      3.949740,      3.907596,      3.653439,      3.456626 },
{       4.290944,      5.147914,      4.191309,      6.224396,      4.242043,      3.825010,      0.000000,      0.000000,      0.000000,      3.892146,      4.036587,      4.238952,      3.858537,      3.228126 },
{       4.930149,      8.014891,      5.433299,      4.810915,      3.996556,      7.956523,      0.000000,      3.470214,      4.042859,      0.000000,      0.000000,      0.000000,      0.000000,      0.000000 },
{       6.311362,      5.930714,      6.104520,      6.474213,      3.464636,      3.710280,      0.000000,      0.000000,      3.383880,      0.000000,      0.000000,      0.000000,      0.000000,      0.000000 },
{       5.088625,      5.739599,      4.915506,      5.099848,      4.009990,      5.303638,      0.000000,      3.861230,      3.494508,      4.083778,      3.989697,      4.071244,      0.000000,      3.775290 },
{       4.128244,      4.730953,      7.004521,      6.101557,      4.075932,      6.090091,      0.000000,      3.837428,      3.732612,      4.086625,      4.061144,      3.437057,      3.644721,      3.898267 },
{       8.126700,     11.223410,      8.363644,      5.302902,      4.098712,      4.961307,      0.000000,      0.000000,      3.580819,      3.722761,      0.000000,      3.421252,      4.644910,      3.545346 },
{       8.481959,      5.554545,      5.412820,      6.318026,      3.548349,      6.811541,      0.000000,      0.000000,      4.901656,      3.654193,      0.000000,      3.317490,      4.026307,      3.870864 },
{       3.650269,      6.382142,      4.932867,      3.321066,      4.150631,      0.000000,      0.000000,      0.000000,      0.000000,      3.618867,      0.000000,      3.547486,      0.000000,      3.933180 },
{       3.840051,      6.916002,      4.745295,      5.840613,      4.323581,      3.836717,      0.000000,      0.000000,      3.352989,      4.217634,      0.000000,      3.876647,      4.274417,      3.713225 },
{       5.976386,      7.669905,      5.895500,      4.158283,      4.175538,      3.825874,      0.000000,      0.000000,      4.065395,      0.000000,      3.880682,      4.073992,      3.942747,      3.313855 },
{       8.934894,      5.957733,      5.687293,      4.248122,      4.121817,      0.000000,      0.000000,      0.000000,      3.973794,      3.249533,      3.858845,      3.812492,      3.818567,      3.836645 }};



}
#endif // UACASTOR_H
